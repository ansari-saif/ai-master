import json
import re
from openai import OpenAI
import os

# Set up your OpenAI API key (Make sure to replace with your actual API key)
client = OpenAI(api_key="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")


def get_ai_response(json_item):
    module = json_item["module"]
    json_structure = json_item["fields"]
    """Function to get a response from the AI."""
    try:
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            # You can change this to another model like gpt-3.5-turbo or gpt-4
            messages=[
                {
                    "role": "system",
                    "content": [
                        {
                            "type": "text",
                            "text": "You're a senior dev. Don't explain the code, just generate the code block itself in json format.\n\nexample \n```[{\n\"file_path\":\"path of the file\",\n\"file_content\":\"code of the file\",\n}]```"
                        }
                    ]
                },
                {
                    "role": "user",
                    "content": [
                        {
                            "type": "text",
                            "text": f"```\n\nCreate a React CRUD application for the `{module}` module \n this is json : ```{json_structure}```\nintegrate api using already autogenerated opeapi spec ts clients\n\n\nhere is the file directory \n\n```\n\nfrontend/\n|   tsconfig.node.json\n|   index.html\n|   tailwind.config.js\n|   modify-openapi-operationids.js\n|   tsconfig.app.json\n|   README.md\n|   yarn.lock\n|   public\n|   |   vite.svg\n|   .gitignore\n|   package-lock.json\n|   package.json\n|   lib\n|   |   utils.ts\n|   components.json\n|   tsconfig.json\n|   eslint.config.js\n|   vite.config.ts\n|   postcss.config.js\n|   openapi.json\n|   src\n|   |   App.tsx\n|   |   main.tsx\n|   |   App.css\n|   |   index.css\n|   |   components\n|   |   |   ui\n|   |   |   |   label.tsx\n|   |   |   |   button.tsx\n|   |   |   |   checkbox.tsx\n|   |   |   |   textarea.tsx\n|   |   |   |   input.tsx\n|   |   |   |   form.tsx\n|   |   |   TodoItem.tsx\n|   |   |   AddTodoForm.tsx\n|   |   |   HomePage.tsx\n|   |   vite-env.d.ts\n|   |   hooks\n|   |   |   use-toast.ts\n|   |   lib\n|   |   |   utils.ts\n|   |   assets\n|   |   |   react.svg\n|   |   pages\n|   |   |   TodoList.tsx\n|   |   client\n|   |   |   core\n|   |   |   |   CancelablePromise.ts\n|   |   |   |   ApiRequestOptions.ts\n|   |   |   |   ApiResult.ts\n|   |   |   |   types.ts\n|   |   |   |   request.ts\n|   |   |   |   ApiError.ts\n|   |   |   |   OpenAPI.ts\n|   |   |   schemas.ts\n|   |   |   index.ts\n|   |   |   models.ts\n|   |   |   services.ts``` \n\nand here is more example file for your reference\nfrontend/src/components/TodoItem.tsx```\nimport React from 'react';\nimport {{ TodoRead }} from '../client';\n\ninterface TodoItemProps {{\n  todo: TodoRead;\n  onToggle: (id: number) => void;\n  onDelete: (id: number) => void;\n}}\n\nconst TodoItem: React.FC<TodoItemProps> = ({{ todo, onToggle, onDelete }}) => {{\n  return (\n    <div className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg shadow-sm\">\n      <div className=\"flex items-center\">\n        <input\n          type=\"checkbox\"\n          checked={{todo.is_completed}}\n          onChange={{() => onToggle(todo.id)}}\n          className=\"mr-3 h-5 w-5 text-blue-500 rounded focus:ring-blue-400\"\n        />\n        <span className={{`text-lg ${{todo.is_completed ? 'line-through text-gray-400' : 'text-gray-700'}}`}}>\n          {{todo.title}}\n        </span>\n      </div>\n      <button\n        onClick={{() => onDelete(todo.id)}}\n        className=\"text-red-500 hover:text-red-700 focus:outline-none transition duration-300 ease-in-out\"\n      >\n        <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n          <path fillRule=\"evenodd\" d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\" clipRule=\"evenodd\" />\n        </svg>\n      </button>\n    </div>\n  );\n}};\n\nexport default TodoItem;\n```\n\nfrontend/src/components/AddTodoForm.tsx```\nimport React, {{ useState }} from 'react';\nimport {{ TodoService }} from '../client';\n\ninterface AddTodoFormProps {{\n  onAdd: () => void;\n}}\n\nconst AddTodoForm: React.FC<AddTodoFormProps> = ({{ onAdd }}) => {{\n  const [title, setTitle] = useState('');\n\n  const handleSubmit = (e: React.FormEvent) => {{\n    e.preventDefault();\n    if (!title.trim()) return;\n\n    TodoService.createTodoApiV1TodoPost({{ requestBody: {{ title }} }})\n      .then(() => {{\n        setTitle('');\n        onAdd();\n      }})\n      .catch(console.error);\n  }};\n\n  return (\n    <form onSubmit={{handleSubmit}} className=\"mt-4\">\n      <div className=\"flex items-center\">\n        <input\n          type=\"text\"\n          value={{title}}\n          onChange={{(e) => setTitle(e.target.value)}}\n          placeholder=\"Add a new todo...\"\n          className=\"flex-grow px-4 py-2 text-gray-700 bg-gray-100 rounded-l-lg focus:outline-none focus:ring-2 focus:ring-blue-400 transition duration-300 ease-in-out\"\n        />\n        <button\n          type=\"submit\"\n          className=\"px-4 py-2 bg-blue-500 text-white rounded-r-lg hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-400 transition duration-300 ease-in-out\"\n        >\n          Add\n        </button>\n      </div>\n    </form>\n  );\n}};\n\nexport default AddTodoForm;"

                        }
                    ]
                },

            ],
            response_format={
                "type": "text"
            },
            temperature=0,
            max_tokens=2048,
        )
        # Extracts the response text
        return response.choices[0].message.content.strip()
    except Exception as e:
        return f"Error fetching response: {str(e)}"

def get_ai_response2(json_item):
    module = json_item["module"]
    """Function to get a response from the AI."""
    try:
        app_file_path = 'frontend/src/App.tsx'
        with open(app_file_path, 'r') as file:
            app_file_content = file.read()
        
        home_file_path = 'frontend/src/components/HomePage.tsx'
        with open(home_file_path, 'r') as file:
            home_file_content = file.read()
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            # You can change this to another model like gpt-3.5-turbo or gpt-4
            messages=[
                {
                    "role": "system",
                    "content": [
                        {
                            "type": "text",
                            "text": "You're a senior dev. Don't explain the code, just generate the code block itself in json format.\n\nexample \n```[{\n\"file_path\":\"path of the file\",\n\"file_content\":\"code of the file\",\n}]```"
                        }
                    ]
                },
                {
                    "role": "user",
                    "content": [
                        {
                            "type": "text",
                            "text": f"here is the `App.tsx` file  you've to add `{module}` rounter in this\n{app_file_path}```{app_file_content}```\n\n\nhere is the home page and you've to add {module} link in  this page\n{home_file_path}```{home_file_content}```"
                        }
                    ]
                },

            ],
            response_format={
                "type": "text"
            },
            temperature=0,
            max_tokens=2048,
        )
        # Extracts the response text
        return response.choices[0].message.content.strip()
    except Exception as e:
        return f"Error fetching response: {str(e)}"


def write_response_to_file(response):
    """Writes the response content to the specified directory and file."""
    # The response should contain directory path and content. Example:
    # "Directory: /path/to/folder FileName: output.txt Content: <content>"
    try:
        # Extract directory, filename, and content from response
        data_list = json.loads(response.strip("```json").strip("```"))
        for file in data_list:
            file_path = file["file_path"]
            os.makedirs(os.path.dirname(file_path), exist_ok=True)

            with open(file_path, 'w') as f:
                f.write(file["file_content"])
        return f"Content successfully written to {file_path}"
    except Exception as e:
        return f"Error writing to file: {str(e)}"


def main():
    with open('engine/master.json', 'r') as file:
        json_data = json.loads(file.read())
        for json_item in json_data:
            # Get response from AI
            response = get_ai_response(json_item)
            result = write_response_to_file(response)
            response = get_ai_response2(json_item)
            result = write_response_to_file(response)
            print(json_item["module"], "done")


if __name__ == "__main__":
    main()
